{"version":3,"sources":["components/company-card/CompanyCard.js","components/list-companies/ListCompanies.js","components/App/App.js","serviceWorker.js","index.js"],"names":["CompanyCard","react_default","a","createElement","src","concat","this","props","company","logo","alt","name","yearFounded","description","sectors","map","sector","key","Component","ListCompanies","listFunction","_this","companiesData","company_card_CompanyCard","_id","className","id","totalCompanies","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","removeClickedClass","clickedClass","document","querySelector","classList","remove","addClickedClass","event","target","add","setState","currentPage","Number","sortName","getElementById","namesAtoZ","state","sort","b","toLowerCase","reverse","sortRelevance","relevance0to1","relevance","sortYear","year0to1","companiesPerPage","_this2","fetch","then","results","json","data","items","total","_this3","indexOfLastCompany","indexOfFirstCompany","currentCompanies","slice","pageNumbers","i","Math","ceil","length","push","renderPageNumbers","number","onClick","type","list_companies_ListCompanies","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAoBeA,mLAdX,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAG,GAAAC,OAAKC,KAAKC,MAAMC,QAAQC,MAAQC,IAAI,SAC5CT,EAAAC,EAAAC,cAAA,UAAKG,KAAKC,MAAMC,QAAQG,KAAxB,gBAA2CL,KAAKC,MAAMC,QAAQI,aAC9DX,EAAAC,EAAAC,cAAA,SAAIG,KAAKC,MAAMC,QAAQK,aACvBZ,EAAAC,EAAAC,cAAA,aAAQG,KAAKC,MAAMC,QAAQM,QAAQC,IAAI,SAAAC,GACrC,OAAOf,EAAAC,EAAAC,cAAA,KAAGc,IAAKD,GAASA,cAVPE,aCwBZC,6MApBbC,aAAe,WACf,OAAOC,EAAKd,MAAMe,cAAcP,IAAK,SAAAP,GACjC,OACEP,EAAAC,EAAAC,cAACoB,EAAD,CAAaN,IAAKT,EAAQgB,IAAKhB,QAASA,+EAM5C,OACCP,EAAAC,EAAAC,cAAA,WAASsB,UAAU,kBACnBxB,EAAAC,EAAAC,cAAA,UAAQuB,GAAG,mBAAX,YAAuCpB,KAAKC,MAAMoB,eAAlD,cACG1B,EAAAC,EAAAC,cAAA,MAAIuB,GAAG,wBACJpB,KAAKc,wBAfaF,aC+IdU,cA7Ib,SAAAA,EAAYrB,GAAO,IAAAc,EAAA,OAAAQ,OAAAC,EAAA,EAAAD,CAAAvB,KAAAsB,IACjBP,EAAAQ,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3B,KAAMC,KAwBR2B,mBAAqB,WACnB,IAAIC,EAAeC,SAASC,cAAc,YACtCF,GACFA,EAAaG,UAAUC,OAAO,YA5BflB,EAiCnBmB,gBAAkB,SAACC,GACjBpB,EAAKa,qBACLO,EAAMC,OAAOJ,UAAUK,IAAI,WAE3BtB,EAAKuB,SAAS,CACZC,YAAaC,OAAOL,EAAMC,OAAOhB,OAtClBL,EA2CnB0B,SAAW,WACT1B,EAAKa,qBACLE,SAASY,eAAe,KAAKV,UAAUK,IAAI,WAC3C,IAAIM,EAAY5B,EAAK6B,MAAM5B,cAAc6B,KAAK,SAASjD,EAAGkD,GACxD,OAAGlD,EAAES,KAAK0C,cAAgBD,EAAEzC,KAAK0C,eAAyB,EACvDnD,EAAES,KAAK0C,cAAgBD,EAAEzC,KAAK0C,cAAwB,EAClD,IAET,OAA4B,IAAxBhC,EAAK6B,MAAMH,SACN1B,EAAKuB,SAAS,CAACtB,cAAe2B,EAAWF,UAAU,EAAMF,YAAa,IAEtExB,EAAKuB,SAAS,CAACtB,cAAe2B,EAAUK,UAAWP,UAAU,EAAOF,YAAa,KAtDzExB,EA2DnBkC,cAAgB,WACdlC,EAAKa,qBACLE,SAASY,eAAe,KAAKV,UAAUK,IAAI,WAC3C,IAAIa,EAAgBnC,EAAK6B,MAAM5B,cAAc6B,KAAK,SAASjD,EAAGkD,GAC5D,OAAGlD,EAAEuD,UAAYL,EAAEK,UAAoB,EACpCvD,EAAEuD,UAAYL,EAAEK,WAAqB,EACjC,IAGT,OAAiC,IAA7BpC,EAAK6B,MAAMK,cACNlC,EAAKuB,SAAS,CAACtB,cAAekC,EAAeD,eAAe,EAAMV,YAAa,IAE/ExB,EAAKuB,SAAS,CAACtB,cAAekC,EAAcF,UAAWC,eAAe,EAAOV,YAAa,KAvElFxB,EA4EnBqC,SAAW,WACTrC,EAAKa,qBACLE,SAASY,eAAe,KAAKV,UAAUK,IAAI,WAC3C,IAAIgB,EAAWtC,EAAK6B,MAAM5B,cAAc6B,KAAK,SAASjD,EAAGkD,GACvD,OAAGlD,EAAEU,YAAcwC,EAAExC,YAAsB,EACxCV,EAAEU,YAAcwC,EAAExC,aAAuB,EACrC,IAGT,OAA4B,IAAxBS,EAAK6B,MAAMQ,SACNrC,EAAKuB,SAAS,CAACtB,cAAeqC,EAAUD,UAAU,EAAMb,YAAa,IAErExB,EAAKuB,SAAS,CAACtB,cAAeqC,EAASL,UAAWI,UAAU,EAAOb,YAAa,KAtFzFxB,EAAK6B,MAAQ,CACX5B,cAAe,GACfK,eAAgB,EAChBoB,UAAU,EACVQ,eAAe,EACfG,UAAU,EACVb,YAAa,EACbe,iBAAkB,GATHvC,mFAcC,IAAAwC,EAAAvD,KAElBwD,MAAM,oDACLC,KAAK,SAAAC,GACJ,OAAOA,EAAQC,SACdF,KAAK,SAAAG,GACN,OAAOL,EAAKjB,SAAS,CAACtB,cAAe4C,EAAKC,MAAOxC,eAAgBuC,EAAKE,2CAiFxE,IATO,IAAAC,EAAA/D,KAGDgE,EAAqBhE,KAAK4C,MAAML,YAAcvC,KAAK4C,MAAMU,iBACzDW,EAAsBD,EAAqBhE,KAAK4C,MAAMU,iBACtDY,EAAmBlE,KAAK4C,MAAM5B,cAAcmD,MAAMF,EAAqBD,GAGvEI,EAAc,GACXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKvE,KAAK4C,MAAM5B,cAAcwD,OAASxE,KAAK4C,MAAMU,kBAAmBe,IAC7FD,EAAYK,KAAKJ,GAGnB,IAAMK,EAAoBN,EAAY3D,IAAI,SAAAkE,GACxC,OACEhF,EAAAC,EAAAC,cAAA,MACEc,IAAKgE,EACLvD,GAAIuD,EACJC,QAASb,EAAK7B,gBACdf,UAAS,eAERwD,KAMP,OACEhF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,6CACRF,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,qBACbxB,EAAAC,EAAAC,cAAA,UAAQgF,KAAK,SAASD,QAAS5E,KAAKyC,UAApC,eAA0D9C,EAAAC,EAAAC,cAAA,WAA1D,IAAiEG,KAAK4C,MAAMH,SAAW,UAAO,WAC9F9C,EAAAC,EAAAC,cAAA,UAAQgF,KAAK,SAASD,QAAS5E,KAAKiD,eAApC,oBAAoEtD,EAAAC,EAAAC,cAAA,WAApE,IAA2EG,KAAK4C,MAAMK,cAAgB,UAAO,WAC7GtD,EAAAC,EAAAC,cAAA,UAAQgF,KAAK,SAASD,QAAS5E,KAAKoD,UAApC,eAA0DzD,EAAAC,EAAAC,cAAA,WAA1D,IAAiEG,KAAK4C,MAAMQ,SAAW,UAAO,YAEhGzD,EAAAC,EAAAC,cAACiF,EAAD,CACE9D,cAAekD,EACf7C,eAAgBrB,KAAK4C,MAAMvB,eAC3BoB,SAAUzC,KAAKyC,SACfQ,cAAejD,KAAKiD,cACpBG,SAAUpD,KAAKoD,WAEjBzD,EAAAC,EAAAC,cAAA,MAAIuB,GAAG,gBAAgBsD,WAvIb9D,aCOEmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASxD,SAASY,eAAe,SD2H3C,kBAAmB6C,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.2eb68956.chunk.js","sourcesContent":["import React, {  Component } from 'react'\n\nclass CompanyCard  extends Component {\n\n  \n  render() { \n    return (\n      <li>\n        <img src={`${this.props.company.logo}`} alt=\"logo\"></img>\n        <h2>{this.props.company.name}, founded in {this.props.company.yearFounded}</h2>\n        <p>{this.props.company.description}</p>\n        <aside>{this.props.company.sectors.map(sector => {\n          return <p key={sector}>{sector}</p>\n        })}</aside>\n      </li>\n\n     );\n  }\n}\n \nexport default CompanyCard;\n\n","import React, {  Component } from 'react'\n\nimport CompanyCard from '../company-card/CompanyCard'\n\nclass ListCompanies  extends Component {\n  // Iterate through companies to render each in the CompanyCard component\n  listFunction = () => {\n  return this.props.companiesData.map((company => {\n      return (\n        <CompanyCard key={company._id} company={company}></CompanyCard>\n      )\n    }))\n  }\n  \n  render() { \n    return (\n     <section className=\"list-container\">\n     <header id=\"total-companies\">Total of {this.props.totalCompanies} companies</header>\n        <ul id=\"list-total-companies\"> \n          {this.listFunction()}\n        </ul>\n      </section> \n     );\n  }\n}\n \nexport default ListCompanies;\n\n","import React, { Component } from 'react';\n// import logo from '../../assets/logos/logo.svg';\n\nimport ListCompanies from '../list-companies/ListCompanies'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      companiesData: [],\n      totalCompanies: 0,\n      sortName: false,\n      sortRelevance: false,\n      sortYear: false,\n      currentPage: 1,\n      companiesPerPage: 3\n     }\n  }\n\n  // fecth API and update state\n  componentDidMount() {\n    // get API data\n    fetch('https://www.mocky.io/v2/5d1a17de2f00002c00fd748e')\n    .then(results => {\n      return results.json();\n    }).then(data => {\n      return this.setState({companiesData: data.items, totalCompanies: data.total})\n    })\n  }\n\n  // remove clicked class if it already exist\n  removeClickedClass = () => {\n    let clickedClass = document.querySelector(\".clicked\")\n    if (clickedClass ) {\n      clickedClass.classList.remove('clicked')\n    }\n  }\n\n  // add clicked class to the clicked page number and update state\n  addClickedClass = (event) => {\n    this.removeClickedClass();\n    event.target.classList.add(\"clicked\")\n\n    this.setState({\n      currentPage: Number(event.target.id)\n    });\n  }\n\n  // function called on click to sort the list by name from AtoZ or ZtoA\n  sortName = () => {\n    this.removeClickedClass();\n    document.getElementById('1').classList.add('clicked')\n    let namesAtoZ = this.state.companiesData.sort(function(a, b){\n      if(a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\n      if(a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\n      return 0;\n    });\n    if (this.state.sortName === false){\n      return this.setState({companiesData: namesAtoZ, sortName: true, currentPage: 1})\n    } else {\n      return this.setState({companiesData: namesAtoZ.reverse(), sortName: false, currentPage: 1})\n    }\n  }\n\n  // function called on click to sort the list by relevance from 0to1 or 1to0\n  sortRelevance = () => {\n    this.removeClickedClass();\n    document.getElementById('1').classList.add('clicked')\n    let relevance0to1 = this.state.companiesData.sort(function(a, b){\n      if(a.relevance < b.relevance) { return 1; }\n      if(a.relevance > b.relevance) { return -1; }\n      return 0;\n    });\n\n    if (this.state.sortRelevance === false){\n      return this.setState({companiesData: relevance0to1, sortRelevance: true, currentPage: 1})\n    } else {\n      return this.setState({companiesData: relevance0to1.reverse(), sortRelevance: false, currentPage: 1})\n    }\n  }\n\n  // function called on click to sort the list by year from 0to1 or 1to0\n  sortYear = () => {\n    this.removeClickedClass();\n    document.getElementById('1').classList.add('clicked')\n    let year0to1 = this.state.companiesData.sort(function(a, b){\n      if(a.yearFounded < b.yearFounded) { return 1; }\n      if(a.yearFounded > b.yearFounded) { return -1; }\n      return 0;\n    });\n\n    if (this.state.sortYear === false){\n      return this.setState({companiesData: year0to1, sortYear: true, currentPage: 1})\n    } else {\n      return this.setState({companiesData: year0to1.reverse(), sortYear: false, currentPage: 1})\n    }\n  }\n\n  render() {\n\n    // Logic for displaying current companies\n    const indexOfLastCompany = this.state.currentPage * this.state.companiesPerPage;\n    const indexOfFirstCompany = indexOfLastCompany - this.state.companiesPerPage;\n    const currentCompanies = this.state.companiesData.slice(indexOfFirstCompany, indexOfLastCompany);\n\n     // [page numer] create the page numbers that will appear in the bottom of the list\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(this.state.companiesData.length / this.state.companiesPerPage); i++) {\n      pageNumbers.push(i);\n    }\n\n    const renderPageNumbers = pageNumbers.map(number => {\n      return (\n        <li\n          key={number}\n          id={number}\n          onClick={this.addClickedClass}\n          className={`page-number`}\n        >\n          {number}\n        </li>\n      );\n    });\n    // end [page number]\n    \n    return (\n      <article>\n        <header><h1>Find the best company for you!</h1></header>\n        <nav className=\"buttons-container\">\n          <button type=\"button\" onClick={this.sortName}>Sort by Name<br/> {this.state.sortName ? ' ▲' : ' ▼'}</button>\n          <button type=\"button\" onClick={this.sortRelevance}>Sort by Relevance<br/> {this.state.sortRelevance ? ' ▲' : ' ▼'}</button>\n          <button type=\"button\" onClick={this.sortYear}>Sort by Year<br/> {this.state.sortYear ? ' ▲' : ' ▼'}</button>\n        </nav>\n        <ListCompanies \n          companiesData={currentCompanies} \n          totalCompanies={this.state.totalCompanies} \n          sortName={this.sortName} \n          sortRelevance={this.sortRelevance} \n          sortYear={this.sortYear}>\n        </ListCompanies>\n        <ul id=\"page-numbers\">{renderPageNumbers}</ul>\n      </article>\n\n    );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}